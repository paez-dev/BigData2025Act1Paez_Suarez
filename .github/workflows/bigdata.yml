name: Proceso Completo de Ingesta y Limpieza de Datos

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  data_processing:
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Checkout del repositorio
      - name: Checkout del repositorio
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      # Paso 2: Configurar Python 3.9
      - name: Configurar Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # Paso 3: Crear directorios necesarios
      - name: Crear directorios necesarios
        run: |
          mkdir -p ~/.kaggle
          mkdir -p src/static/auditoria
          mkdir -p src/static/csv
          mkdir -p src/static/db

      # Paso 4: Configurar credenciales de Kaggle
      - name: Configurar credenciales de Kaggle
        run: |
          printf '{"username": "%s", "key": "%s"}' "${{ secrets.KAGGLE_USERNAME }}" "${{ secrets.KAGGLE_KEY }}" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      # Paso 5: Instalar dependencias
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install matplotlib seaborn

      # Paso 6: Configurar Git
      - name: Configurar Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config pull.rebase false

      # Paso 7: Limpiar archivos existentes
      - name: Limpiar archivos existentes
        run: |
          rm -f src/static/csv/cleaned_data.csv
          rm -f src/static/auditoria/cleaning_report.txt
          rm -f src/static/auditoria/ingestion.txt
          rm -f src/static/csv/ingestion.csv

      # Paso 8: Sincronizar con el repositorio remoto
      - name: Sincronizar con el repositorio remoto
        run: |
          git pull origin main --no-rebase || echo "Pull completado con posibles conflictos"

      # Paso 9: Ejecutar scripts
      - name: Ejecutar scripts de procesamiento
        run: |
          python src/ingestion.py
          python src/cleaning.py

      # Paso 10: Verificar archivos generados
      - name: Verificar archivos generados
        run: |
          ls -la src/static/auditoria/
          ls -la src/static/csv/
          ls -la src/static/db/

      # Paso 11: Subir artefactos
      - name: Subir artefactos
        uses: actions/upload-artifact@v4
        with:
          name: evidencias-procesamiento
          path: |
            src/static/db/*.db
            src/static/csv/*.csv
            src/static/auditoria/*.txt

      # Paso 12: Commit y Push de los cambios
      - name: Commit y Push de los cambios
        run: |
          # Verificar y agregar archivos si existen
          for file in \
            "src/static/csv/ingestion.csv" \
            "src/static/auditoria/ingestion.txt" \
            "src/static/csv/cleaned_data.csv" \
            "src/static/auditoria/cleaning_report.txt"
          do
            if [ -f "$file" ]; then
              git add "$file"
              echo "Agregado: $file"
            else
              echo "No encontrado: $file"
            fi
          done

          git commit -m "Actualización automática de evidencias" || echo "No hay cambios para commitear"
          git push origin main --force